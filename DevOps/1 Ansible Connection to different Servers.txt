To connect Ansible to an EC2 instance, start by ensuring your EC2 instance is running and that you have its public or private IP address along with the .pem SSH key file you downloaded from AWS. The default user to connect to EC2 depends on the operating system: for Ubuntu, it's usually ubuntu; for Amazon Linux, it's typically ec2-user. You should update your Ansible inventory file (for example, hosts.ini) with the EC2 IP address, optionally grouping servers like [webserver] 172.31.87.175. If you include the username in the inventory, use the format ubuntu@IP, or use ansible_user=ubuntu as a host variable.

Once the inventory is ready, verify SSH access by using the ansible command to ping the instance:
ansible all -i hosts.ini -m ping --private-key /path/to/your-key.pem.
If this works, it means Ansible can reach your EC2 machine over SSH. When writing your playbooks, include become: true for tasks that require sudo access (like installing packages). You can then execute the playbook with:
ansible-playbook -i hosts.ini your-playbook.yaml --private-key /path/to/your-key.pem.

Make sure your SSH key file has secure permissions by running chmod 400 your-key.pem. Also ensure your control machine has Ansible installed and can reach the EC2 instanceâ€™s IP (which may be private or public depending on your VPC settings and security group rules). Once this setup is complete, you're ready to manage your EC2 instance using Ansible just like any other Linux server.

=====================================================================================

Question: but with a limitation of mentioning every key everytime with ansible command

To solve the above Limitation: 

While using --private-key with Ansible solves the problem cleanly without uploading the key, it does come with one minor trade-off:
ðŸ‘‰ You have to specify the --private-key option every time you run an Ansible command unless you configure it more permanently.

ðŸ”§ Two Ways to Avoid Repeating --private-key Every Time:
1. Use ansible.cfg to Set a Default Key
You can create or edit an ansible.cfg file in your project directory and add:

[defaults]
inventory = hosts.ini                   : This contains all the servers either all single or properly group
private_key_file = ~/ec2-key.pem
remote_user = ubuntu

run this command Freely: ansible all -m ping


=================================== Config for same Servers===============================

Step1: host.ini (This is the inventory file)          : Create this file any where and provide path in "ansible.cfg" file 
[webservers]
172.31.87.175
172.31.86.184

[dbservers]
172.31.87.170
44.212.66.9

[all:vars]
ansible_user=ubuntu
ansible_ssh_private_key_file=~/.ssh/my-key.pem


Step2: You can create or edit an ansible.cfg file in your project directory and add:

[defaults]
inventory = hosts.ini                   : This contains all the servers either all single or properly group
private_key_file = ~/ec2-key.pem
remote_user = ubuntu

once the ansible.cfg in the same path then there is no need for providing inventory all the time. 

================================== For Servers of Various Types ======================================

1: For this First Case the key is Same for various kind of Servers 

[ubuntu_servers]
172.31.87.175

[redhat_servers]
172.31.86.184

[centos_servers]
172.31.87.170

[debian_servers]
44.212.66.9

[windows_servers]
13.58.124.7

# Group-specific variables
[ubuntu_servers:vars]
ansible_user=ubuntu

[redhat_servers:vars]
ansible_user=ec2-user

[centos_servers:vars]
ansible_user=centos

[debian_servers:vars]
ansible_user=admin

[windows_servers:vars]
ansible_user=Administrator
ansible_connection=winrm
ansible_port=5986
ansible_winrm_transport=basic
ansible_winrm_server_cert_validation=ignore

# Shared key for all servers
[all:vars]
ansible_ssh_private_key_file=~/.ssh/common-key.pem


Case 2: Both Servers and key are different: 

[ubuntu_servers]
172.31.87.175

[redhat_servers]
172.31.86.184

[centos_servers]
172.31.87.170

[debian_servers]
44.212.66.9

[windows_servers]
13.58.124.7

# -------- Group Variables -------- #

[ubuntu_servers:vars]
ansible_user=ubuntu
ansible_ssh_private_key_file=~/.ssh/ubuntu-key.pem

[redhat_servers:vars]
ansible_user=ec2-user
ansible_ssh_private_key_file=~/.ssh/redhat-key.pem

[centos_servers:vars]
ansible_user=centos
ansible_ssh_private_key_file=~/.ssh/centos-key.pem

[debian_servers:vars]
ansible_user=admin
ansible_ssh_private_key_file=~/.ssh/debian-key.pem

[windows_servers:vars]
ansible_user=Administrator
ansible_connection=winrm
ansible_port=5986
ansible_winrm_transport=basic
ansible_winrm_server_cert_validation=ignore
ansible_password=YourWindowsPasswordHere

++++++++++++++++++++++++++++++++ To Install a Package on Cross Platform OSes =+++++++++++++++++++++++++++++++++++


Yaml File : Remember: ansible_facts['os_family'] Checks the Operating System Type
---
- name: Install nginx on any Linux distro
  hosts: all
  become: yes

  tasks:
    - name: Update apt cache (Debian-based)            : Nginx was installed using " ansible.builtin.package" module
      ansible.builtin.apt:
        update_cache: yes
      when: ansible_facts['os_family'] == 'Debian'

    - name: Install nginx on Debian/Ubuntu
      ansible.builtin.apt:
        name: nginx
        state: present
      when: ansible_facts['os_family'] == 'Debian'

    - name: Install nginx on RedHat/CentOS
      ansible.builtin.yum:
        name: nginx
        state: present
      when: ansible_facts['os_family'] == 'RedHat'


