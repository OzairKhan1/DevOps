========================================
VPC (Virtual Private Cloud) - Notes
========================================

1) What is a VPC?
-----------------
A VPC (Virtual Private Cloud) is a logically isolated section of the AWS cloud 
where you can launch AWS resources (like EC2, RDS, etc.) in your own defined 
virtual network. You control the IP addressing, subnets, routing, and security.

Think of it as your own private data center inside AWS.

----------------------------------------
2) Main Components of a VPC
----------------------------------------
- CIDR Block: The IP range for your VPC (example: 10.0.0.0/16).
- Subnets: Divide the VPC into smaller networks (public/private).
- Route Tables: Define how traffic flows (to IGW, NAT, etc).
- Internet Gateway (IGW): Connects the VPC to the internet.
- NAT Gateway: Lets private subnet instances connect to internet (outbound only).
- Security Groups: Firewall at instance level.
- Network ACLs: Firewall at subnet level.
- VPC Peering: Connects two VPCs together.
- VPC Endpoints: Private connection to AWS services (S3, DynamoDB, etc).
- Elastic IP: Static public IP you can attach to resources.


=========================================================================================================
								Simply Steps For Creating VPC
=========================================================================================================

1: Cteate vpc
2: Create Internet Gateway
3: Attach Internet Gateway to VPC
4: Create Subnets: both Private and Public. Each has their own CIDR Range from VPC CIDR
5: Create Routing Table for both Public and Private subnet
6: Connect Public route table to the Internet Gateway
7: Associate Public Subnet With Public route table
8: Associate Private Subnet to Private route table. No need to connect this to default route
9: Create Resources like Ec2 in Public and Ssh to check the Connectivity. Make sure in the Created VPC

----------------------------------------
4) Questions and Answers
----------------------------------------

Q1) What are the main attributes required when creating a VPC (from AWS Console)?
A1) 
- Name tag (for identification)
- IPv4 CIDR block (example: 10.0.0.0/16)
- Tenancy (Default or Dedicated)
Optionally: IPv6 CIDR block
So the real "required" fields are just Name, IPv4 CIDR, and Tenancy.

----------------------------------------

Q2) Is both NAT Gateway and Load Balancer required for a VPC, or 1 at a time?
A2) 
- NAT Gateway is for outbound traffic from private subnets to internet.
- Load Balancer is for inbound traffic from internet to EC2.
- They are different and not always needed together.
- Typical production: Use both (LB for inbound, NAT for outbound).
- Internal-only apps: Only NAT.
- Public-only single EC2: Only LB (or Elastic IP).

----------------------------------------

Q3) When someone from internet wants to reach an app, what is the traffic flow?
A3) 
Internet -> Internet Gateway -> Load Balancer in Public Subnet -> EC2 in Private Subnet.

----------------------------------------

Q4) Why is it called a public subnet if EC2s work in private subnet?
A4) 
- A subnet is "public" if its route table has a default route (0.0.0.0/0) 
  pointing to the Internet Gateway.
- The Load Balancer lives in the public subnet so it can be internet-facing.
- The EC2s live in private subnet for security, reachable only through the LB.

----------------------------------------

Q5) The IGW faces internet, so it must have a public IP. The Load Balancer has a 
public IP. What about the subnet between them?
A5) 
- The Internet Gateway itself does not have a public IP.
- Instead, it maps the public IP of the Load Balancer to its private IP 
  inside the public subnet.
- The public subnet is just a private range (e.g., 10.0.1.0/24) 
  with a route to IGW.
- So the subnet itself does not have a public IP. The ALB does.

----------------------------------------

Q6) Our EC2 is running on private IP. Which IP do we expose for people to reach?
A6) 
- You expose the Load Balancer's Public IP or DNS.
- The EC2 private IP is never exposed directly.
- Alternative (not recommended): Put EC2 in public subnet and assign Elastic IP.
- Best practice: EC2 in private subnet + ALB in public subnet.

Q7) tell me how many network are ther in 10.0.0.0/16. How many /24 net and /28 netwrok can i create in it
Base network: 10.0.0.0/16

Total addresses in /16:
- 2^(32-16) = 2^16 = 65,536 IPs
To Find the total number of Networks. Simply Subtract the small number from large, e.g: shown below.
How many /24s fit inside a /16?
- Difference in prefix = 24 - 16 = 8 bits
- Number of /24 subnets = 2^8 = 256
- Each /24 has 2^(32-24) = 2^8 = 256 IPs

How many /28s fit inside a /16?
- Difference in prefix = 28 - 16 = 12 bits
- Number of /28 subnets = 2^12 = 4,096
- Each /28 has 2^(32-28) = 2^4 = 16 IPs


Bullets:
Nice work 👌 You’re thinking in the right direction. Let’s go line by line and correct/confirm each:

---

**1: Each Resource created in Public Subnet will have an access to Internet Gateway.**
❌ *Not always true.*

* A subnet is “public” only if **its route table has a default route (0.0.0.0/0) pointing to the IGW**.
* Even then, a resource must also have a **public IP or Elastic IP** to actually talk to the internet.
  ✅ Corrected:

> A resource in a public subnet **with a public IP and a route to IGW** can access the internet.

---

**2: Private Subnet can use NAT to access the internet without exposing their IP.**
✅ Correct.

* NAT Gateway/Instance sits in a **public subnet**.
* It replaces private IPs with its own **public IP** for outbound connections.
* Inbound connections from internet are **not allowed**.

---

**3: Both Private and Public Subnet will use Routing Table 1 for each, which will take the traffic to the Subnet.**
❌ Not accurate.

* Each subnet must be explicitly associated with **a route table**.
* Public subnets → route table with **0.0.0.0/0 → IGW**.
* Private subnets → route table with **0.0.0.0/0 → NAT Gateway** (for outbound) or **no internet route** (for internal-only).
* They can use the same route table *if configured that way*, but usually best practice is **separate route tables** for clarity.
  ✅ Corrected:

> Public and private subnets each need an associated route table.
> Public subnet route → IGW. Private subnet route → NAT Gateway or none.

---

**4: Public facing resources like Web app will be put in public subnet while resource like database will be put in private.**
✅ Correct.

* Web servers, Load Balancers → public subnet (reachable from internet).
* Databases, app servers → private subnet (reachable only internally, not from internet).

---

### ✅ Final Corrected Version

```
1. A resource in a public subnet can access the Internet Gateway 
   only if it has a public IP and the subnet route table points to IGW.

2. Private subnets can use a NAT Gateway/Instance to access the internet 
   for outbound traffic, without exposing private IPs.

3. Each subnet requires an associated route table.
   - Public subnet → 0.0.0.0/0 → Internet Gateway
   - Private subnet → 0.0.0.0/0 → NAT Gateway (or none, if internal-only)

4. Public-facing resources (e.g., web apps, ALB) are placed in public subnets,
   while internal resources (e.g., databases, app servers) are placed in private subnets.

========================================
END OF NOTES
========================================


========================================
Step-by-step: Create a VPC (AWS Console)
========================================

PREP (decide values)
- VPC CIDR (example): 10.0.0.0/16
- Public subnet(s) (example): 10.0.1.0/24  (AZ-a), 10.0.3.0/24 (AZ-b)
- Private subnet(s) (example): 10.0.2.0/24 (AZ-a), 10.0.4.0/24 (AZ-b)
- Region: pick one region (e.g., us-east-1)
- Note: AWS reserves 5 IPs per subnet.

1) Create the VPC
- Console: VPC -> Your VPCs -> Create VPC
- Fields:
  - Name tag: MyVPC
  - IPv4 CIDR block: 10.0.0.0/16
  - IPv6: optional
  - Tenancy: Default
  - (Important) Enable DNS resolution and DNS hostnames if you want AWS public DNS names: tick both (or edit VPC after creation).
- Click Create.

2) Create Internet Gateway (IGW) and attach it
- Console: VPC -> Internet Gateways -> Create internet gateway
  - Name tag: MyVPC-IGW
- After creation: select the IGW -> Actions -> Attach to VPC -> choose MyVPC -> Attach.
- Association: IGW **attached** to your VPC.

3) Create Subnets
- Console: VPC -> Subnets -> Create subnet
- For each subnet:
  - Select VPC: MyVPC
  - AZ: choose availability zone (spread subnets across AZs for HA)
  - IPv4 CIDR: use values above (10.0.1.0/24 etc.)
  - Name tag: e.g., Public-subnet-a, Private-subnet-a
  - For public subnets you can enable "Auto-assign public IPv4 address" (or you can enable at instance launch). This setting makes instances launched with public IPs automatically get them.
- Create at least:
  - Public-subnet-a (10.0.1.0/24)
  - Private-subnet-a (10.0.2.0/24)
  - (Repeat for AZ-b if desired)
- Note: Subnet CIDRs must be inside VPC CIDR.

4) Create Route Tables
4a) Public route table
- Console: VPC -> Route Tables -> Create route table
  - Name: Public-RT
  - VPC: MyVPC
- Edit routes on Public-RT:
  - Add route: Destination 0.0.0.0/0 -> Target: select the Internet Gateway (MyVPC-IGW)
- Associate Public-RT:
  - Actions -> Edit subnet associations -> check the public subnet(s) (Public-subnet-a, Public-subnet-b) -> Save
- Result: any resource in those subnets with a public IP can reach internet and be reached (if security group allows).

4b) Private route table
- Create another route table:
  - Name: Private-RT
  - VPC: MyVPC
- Associate Private-RT:
  - Actions -> Edit subnet associations -> check the private subnet(s) (Private-subnet-a, Private-subnet-b) -> Save
- Note: Do NOT add 0.0.0.0/0 -> IGW for private RT. You will add route to NAT later.

5) Create NAT Gateway (for private subnets outbound internet)
- Console: VPC -> NAT Gateways -> Create NAT gateway
  - Subnet: pick one PUBLIC subnet (e.g., Public-subnet-a)
  - Elastic IP: allocate new Elastic IP (this gives the NAT a public IP)
  - Name tag: MyVPC-NAT-a
- Click Create and wait until state = Available.
- (Optional for HA) Create a NAT gateway in each AZ (each in that AZ's public subnet).
- Associate NAT with Private route table:
  - VPC -> Route Tables -> select Private-RT -> Routes -> Edit routes -> Add route:
    - Destination: 0.0.0.0/0 -> Target: NAT Gateway -> select MyVPC-NAT-a
  - Save.
- Now instances in private subnets can reach the Internet (outbound) via NAT, while still having no public IP.

6) Security Groups (instance-level firewalls)
- Console: VPC or EC2 -> Security Groups -> Create security group
- Example SGs:
  A) ALB-SG (for Load Balancer)
     - VPC: MyVPC
     - Inbound rules: HTTP (80) from 0.0.0.0/0; HTTPS (443) from 0.0.0.0/0 (if needed)
     - Outbound: Allow all (default)
  B) App-SG (for application EC2 instances)
     - VPC: MyVPC
     - Inbound rules: HTTP (80) from source = security group ALB-SG (use ALB-SG ID) -> this allows only ALB to talk to instances
     - Outbound: Allow all or restrict as needed (e.g., to DB port)
- Attach these SGs later when creating ALB and EC2.

7) Launch EC2 instances in PRIVATE subnets
- Console: EC2 -> Instances -> Launch instances
- Configure instance:
  - Network: select MyVPC
  - Subnet: choose Private-subnet-a (no public IP)
  - Auto-assign Public IP: disabled (important)
  - Security group: choose App-SG
  - Key pair, user-data etc.
- Launch one or more instances across private subnets (for HA, launch in multiple AZs).
- Note: to connect to these instances for management, use:
  - a) a bastion/jump host in a public subnet (with a public IP) + SSH, OR
  - b) use AWS Systems Manager Session Manager (recommended, no public IP needed), OR
  - c) temporarily assign public IP (not recommended for production).

8) Create an Internet-facing Load Balancer (ALB) in public subnets
- Console: EC2 -> Load Balancers -> Create Load Balancer -> Application Load Balancer
- Settings:
  - Name: MyApp-ALB
  - Scheme: internet-facing
  - IP address type: ipv4
  - Listeners: HTTP (80) and/or HTTPS (443)
  - Availability Zones: select the public subnets (Public-subnet-a, Public-subnet-b)
  - Security group: choose ALB-SG
- Configure target group:
  - Create new target group (target type = instance or IP)
  - Protocol: HTTP, Port: 80
  - VPC: MyVPC
  - Health check path: / (or app path)
- Register targets:
  - Select the private EC2 instances launched earlier.
- Create ALB.
- Association: ALB is in public subnets and will forward to target group (instances in private subnets).

9) Ensure security group rules align
- ALB-SG inbound: allow 0.0.0.0/0:80 (or 443)
- App-SG inbound: allow ALB-SG (source = ALB-SG id) on port 80
- This ensures internet → ALB → EC2 works, but not direct internet → EC2.

10) (Optional) Database (RDS) in private subnets
- Create DB Subnet Group:
  - Console: RDS -> Subnet groups -> Create DB subnet group -> include private subnets
- Launch RDS:
  - DB in VPC: MyVPC
  - Subnet group: the DB subnet group above (private subnets)
  - Publicly accessible: No
  - Security group: create DB-SG allowing inbound from App-SG (DB port)
- Association: RDS in private subnets + SG allowing only app SG.

11) (Optional) VPC Endpoints to keep AWS service traffic private
- Console: VPC -> Endpoints -> Create endpoint
  - For S3: choose Gateway endpoint, select MyVPC, select route tables (private RTs)
  - For other services: choose Interface endpoint and specify private subnets + SG
- Association: Endpoint is associated with VPC and route tables/ENIs.

12) VPC settings to check
- VPC -> Your VPCs -> select MyVPC -> Actions -> Edit DNS hostnames: ensure enabled if you want public DNS names for instances/ALB.
- DHCP options: default is usually fine.

13) Test connectivity
- Inbound test:
  - Copy the ALB DNS name (from Load Balancer details)
  - From your browser, hit the ALB DNS name: you should reach the app served by EC2 in private subnet.
- Outbound test (from EC2 in private subnet):
  - Use SSM or SSH via bastion to get shell on EC2. Run: curl https://example.com
  - If it works, NAT gateway routing is correct.
- Health checks:
  - Check ALB target group health status -> instances should be healthy.

14) Cleanup notes & costs
- NAT Gateway and ALB incur hourly and data-transfer costs.
- Elastic IP costs when unused.
- To avoid charges, delete NAT and ALB when not needed.

----------------------------------------
Quick association checklist (things you MUST associate)
----------------------------------------
- Attach IGW to VPC (IGW -> Attach to VPC)
- Associate Public Route Table -> Public subnet(s)
- Associate Private Route Table -> Private subnet(s)
- Route in Public-RT: 0.0.0.0/0 -> IGW
- Route in Private-RT: 0.0.0.0/0 -> NAT Gateway (after creating NAT)
- Security group associations: ALB -> ALB-SG; Instances -> App-SG
- ALB -> Target Group -> registered instances (private IPs)
- RDS -> DB Subnet Group -> private subnets
- VPC Endpoints -> associated route tables (for gateway endpoints) or subnets+SGs (for interface endpoints)

END


